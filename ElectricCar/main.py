import random
import EVRP
import heuristic
import stats


# initialiazes a run for your heuristic
def start_run(r: int):
    random.seed(r)  # Random seed
    EVRP.init_evals()
    EVRP.init_current_best()
    print("Run: {} with random seed {}".format(r, r))


# gets an observation of the run for your heuristic
def end_run(r: int):
    stats.get_mean(r - 1, EVRP.get_current_best())
    print("End of run {} with best solution quality {} total evaluations: {}".format(r, EVRP.get_current_best(),
                                                                                     EVRP.get_evals()))


# sets the termination conidition for your heuristic
def termination_condition():
    flag = False

    if EVRP.get_evals() >= EVRP.TERMINATION:
        flag = True
    return flag


'''
/****************************************************************/
/*                Main Function                                 */
/****************************************************************/
'''
if __name__ == "__main__":
    # Step 1
    EVRP.problem_instance = "E:\Vinh\CS106-AI\evrp-benchmark-set\E-n22-k4.evrp"  # pass the .evrp filename as an argument
    EVRP.read_problem(EVRP.problem_instance)  # Read EVRP from file from EVRP.py

    # Step 2
    stats.open_stats()  # open text files to store the best values from the 20 runs stats.py

    for run in range(1, stats.MAX_TRIALS + 1):
        # Step 3
        start_run(run)
        # Initialize your heuristic here
        heuristic.initialize_heuristic()

        # Step 4
        while not termination_condition():
            # Execute your heuristic
            heuristic.run_heuristic()

        '''EVRP.print_solution(heuristic.best_sol[0], heuristic.best_sol[3])
		EVRP.check_solution(heuristic.best_sol[0], heuristic.best_sol[3])'''

        '''
		Note that the solution generated by the random heuristic may not 
		be feasisble in terms of energy when check_solution is utilized. 
		The implementation is only for your reference
		'''

        # Step 5
        end_run(run)  # store the best solution quality for each run

    # Step 6
    stats.close_stats()  # close text files to calculate the mean result from the 20 runs stats.py
